// Configure Prisma client for JavaScript usage.
generator client {
  provider = "prisma-client-js"
}

// Datasource configuration for MySQL with dynamic URL from environment variable.
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Seed script
seed = "node prisma/seed.js"

// Model representing user with their professional details.
model User {
  // Identifiers
  id Int @id @default(autoincrement()) // Unique identifier for each user.

  // Foreign Keys
  city_id Int // Foreign key to associate user with a city.

  // Attributes
  email                  String  @unique // Unique email for user, used for login.
  password               String // Password for user's account.
  name                   String // Full name of the .
  profile_image_url      String? // Optional profile image URL.
  intro                  String? // Optional short introduction or bio.
  phone_number           String? // Optional contact phone number.
  work_start_time        String? // Format "HH:MM"                // Optional start time of workday.
  work_end_time          String? // Format "HH:MM"                // Optional end time of workday.
  work_experience        Int? // Optional years of work experience.

  // Flags
  is_deleted             Boolean @default(false) // Flag to soft delete the user.

  // Metadata
  created_at             DateTime  @default(now()) // Timestamp when the user record was created.
  updated_at             DateTime  @default(now()) // Timestamp when the user record was last updated.
  deleted_at             DateTime? // Optional timestamp for when the user was deleted.

  // Relations
  city                       City                    @relation(fields: [city_id], references: [id])
  job_posts                  JobPost[]               // Job posts created by the user.
  applications               JobApplication[]
  received_reviews           Review[]                @relation("ReceivedReviews") // Reviews received by the user.
  written_reviews            Review[]                @relation("WrittenReviews") // Reviews written by the user.
  preferences                UserPreference[]        // User's preferences for minor categories.

  @@map("user")
}

// Model representing job post created by user.
model JobPost {
  // Identifiers
  id            Int @id @default(autoincrement()) // Unique identifier for each job post.

  // Foreign Keys
  user_id       Int // Foreign key linking to the Users table.
  city_id       Int // Foreign key linking to the City table.

  // Attributes
  title         String // Title of the job post.
  summary       String // Short summary or description of the job post.
  fee           Decimal // Offered fee for the job.
  contact_info  String // Contact information for job applications.
  status        String  @default("open") // Status of the job post (e.g., open, closed, under review).

  // Flags
  is_deleted             Boolean @default(false) // Flag to soft delete the user.

  // Metadata
  created_at    DateTime  @default(now()) // Timestamp when the job post was created.
  updated_at    DateTime  @updatedAt // Timestamp when the job post was last updated.
  deleted_at    DateTime? // Optional timestamp for when the job post was deleted.

  // Relations
  user             User                  @relation(fields: [user_id], references: [id])
  city             City                     @relation(fields: [city_id], references: [id])
  applications     JobApplication[]
  job_categories   JobCategory[]

  @@map("job_post")
}

// Model representing applications for job post by user.
model JobApplication {
  // Identifiers
  id Int @id @default(autoincrement()) // Unique identifier for each application.

  // Foreign Keys
  job_post_id  Int // Foreign key linking to the JobPosts table.
  applicant_id Int // Foreign key linking to the Users table (as applicants).

  // Attributes
  cover_letter String? // Optional cover letter submitted by the applicant.
  status       String  @default("pending") // Status of the application (pending, accepted, rejected).

  // Metadata
  applied_at DateTime @default(now()) // Timestamp when the application was submitted.
  updated_at DateTime @updatedAt // Timestamp when the application was last updated.

  // Relations
  job_post  JobPost @relation(fields: [job_post_id], references: [id])
  applicant User    @relation(fields: [applicant_id], references: [id])

  @@map("job_application")
}

// Model for major categories of jobs.
model MajorCategory {
  // Identifiers
  id Int @id @default(autoincrement()) // Unique identifier for each major category.

  // Attributes
  name        String // Name of the major category.
  major_image_url String? // Optional image URL for the major category.

  // Relations
  minor_categories MinorCategory[] // Related minor categories under each major category.
  
  @@map("major_category")
}

// Model for minor categories that fall under major categories.
model MinorCategory {
  // Identifiers
  id Int @id @default(autoincrement()) // Unique identifier for each minor category.

  //Foreign Keys
  major_category_id Int // Foreign key linking to the MajorCategories table.

  // Attributes
  name        String // Name of the minor category.
  minor_image_url String? // Optional image URL for the minor category.

  // Relations
  major_category     MajorCategory          @relation(fields: [major_category_id], references: [id])
  user_preferences   UserPreference[]
  job_posts          JobCategory[]

  @@map("minor_category")
}

// Junction table for many-to-many relationship between users and their preferred minor categories.
model UserPreference {
  // Identifiers
  user_id           Int
  minor_category_id Int

  // Relations
  user              User          @relation(fields: [user_id], references: [id])
  minor_category    MinorCategory @relation(fields: [minor_category_id], references: [id])

  @@id([user_id, minor_category_id])
  @@map("user_preference")
}

// Junction table for many-to-many relationship between job posts and minor categories.
model JobCategory {
  // Identifiers
  job_post_id       Int
  minor_category_id Int

  // Relations
  job_post          JobPost        @relation(fields: [job_post_id], references: [id])
  minor_category    MinorCategory  @relation(fields: [minor_category_id], references: [id])

  @@id([job_post_id, minor_category_id])
  @@map("job_category")
}

// Model representing review given to user by peer.
model Review {
  // Identifiers
  id Int @id @default(autoincrement()) // Unique identifier for each review.

  // Foreign Keys
  reviewee_id Int // Foreign key linking to the Users table.
  reviewer_id Int // Foreign key linking to the Users table.

  // Attributes
  rating   Int // Numerical rating given to the user.
  comment  String // Textual comment or feedback.

  // Metadata
  created_at DateTime @default(now()) // Timestamp when the review was created.
  updated_at DateTime @default(now()) // Timestamp when the review was last updated.

  // Relations
  reviewee User @relation("ReceivedReviews", fields: [reviewee_id], references: [id])
  reviewer User @relation("WrittenReviews", fields: [reviewer_id], references: [id])

  @@map("review")
}

// Model representing a geographic region.
model Region {
  // Identifiers
  id Int @id @default(autoincrement()) // Unique identifier for each region.

  // Attributes
  name String // Name of the region.

  // Relations
  cities City[] // List of cities within the region.

  @@map("region")
}

// Model representing a city.
model City {
  // Identifiers
  id Int @id @default(autoincrement()) // Unique identifier for each city.

  // Foreign Keys
  region_id Int // Foreign key linking to the Region model.

  //Attributes
  name String // Name of the city.

  // Relations
  region    Region     @relation(fields: [region_id], references: [id]) // Relationship to the Region model.
  users     User[]
  job_posts JobPost[]

  @@map("city")
}
