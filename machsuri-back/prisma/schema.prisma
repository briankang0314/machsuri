// Configure Prisma client for JavaScript usage.
generator client {
  provider = "prisma-client-js"
}

// Datasource configuration for MySQL with dynamic URL from environment variable.
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Model representing expert users with their professional details.
model Experts {
  // Identifiers
  id Int @id @default(autoincrement()) // Unique identifier for each expert.

  // Foreign Keys
  city_id Int // Foreign key to associate expert with a city.

  // Attributes
  email           String  @unique // Unique email for expert, used for login.
  password        String // Password for expert's account.
  name            String // Full name of the expert.
  expert_image    String? // Optional profile image URL.
  intro           String? // Optional short introduction or bio.
  phone_number    String? // Optional contact phone number.
  start_time      String? // Format "HH:MM"                // Optional start time of workday.
  end_time        String? // Format "HH:MM"                // Optional end time of workday.
  work_experience Int? // Optional years of work experience.

  // Flags
  is_deleted Boolean @default(false) // Flag to soft delete the expert.

  // Metadata
  created_at DateTime  @default(now()) // Timestamp when the expert record was created.
  updated_at DateTime  @default(now()) // Timestamp when the expert record was last updated.
  deleted_at DateTime? // Optional timestamp for when the expert was deleted.

  // Relations
  city                       City                    @relation(fields: [city_id], references: [id])
  job_posts                  JobPosts[] // Job posts created by the expert.
  applications               JobApplications[]
  reviews                    Reviews[] // Reviews written for the expert.
  minor_category_preferences ExpertMinorCategories[] // Expert's preferences for minor categories.

  @@map("experts")
}

// Model representing job posts created by experts.
model JobPosts {
  // Identifiers
  id Int @id @default(autoincrement()) // Unique identifier for each job post.

  // Foreign Keys
  expert_id Int // Foreign key linking to the Experts table.
  city_id   Int // Foreign key linking to the City table.

  // Attributes
  title        String // Title of the job post.
  summary      String // Short summary or description of the job post.
  remuneration Decimal // Offered remuneration for the job.
  contact_info String // Contact information for job applications.
  status       String  @default("open") // Status of the job post (e.g., open, closed, under review).

  // Metadata
  created_at DateTime  @default(now()) // Timestamp when the job post was created.
  updated_at DateTime  @updatedAt // Timestamp when the job post was last updated.
  deleted_at DateTime? // Optional timestamp for when the job post was deleted.

  // Relations
  expert           Experts                  @relation(fields: [expert_id], references: [id])
  city             City                     @relation(fields: [city_id], references: [id])
  applications     JobApplications[]
  minor_categories JobPostMinorCategories[]
  major_categories JobPostMajorCategories[]

  @@map("job_posts")
}

// Model representing applications for job posts by experts.
model JobApplications {
  // Identifiers
  id Int @id @default(autoincrement()) // Unique identifier for each application.

  // Foreign Keys
  job_post_id  Int // Foreign key linking to the JobPosts table.
  applicant_id Int // Foreign key linking to the Experts table (as applicants).

  // Attributes
  cover_letter String? // Optional cover letter submitted by the applicant.
  status       String  @default("pending") // Status of the application (pending, accepted, rejected).

  // Metadata
  applied_at DateTime @default(now()) // Timestamp when the application was submitted.
  updated_at DateTime @updatedAt // Timestamp when the application was last updated.

  // Relations
  job_post  JobPosts @relation(fields: [job_post_id], references: [id])
  applicant Experts  @relation(fields: [applicant_id], references: [id])

  @@map("job_applications")
}

// Model for major categories of jobs.
model MajorCategories {
  // Identifiers
  id Int @id @default(autoincrement()) // Unique identifier for each major category.

  // Attributes
  name        String // Name of the major category.
  major_image String? // Optional image URL for the major category.

  // Relations
  minor_categories MinorCategories[] // Related minor categories under each major category.
  job_posts        JobPostMajorCategories[]

  @@map("major_categories")
}

// Model for minor categories that fall under major categories.
model MinorCategories {
  // Identifiers
  id Int @id @default(autoincrement()) // Unique identifier for each minor category.

  //Foreign Keys
  major_category_id Int // Foreign key linking to the MajorCategories table.

  // Attributes
  name        String // Name of the minor category.
  minor_image String? // Optional image URL for the minor category.

  // Relations
  major_category     MajorCategories          @relation(fields: [major_category_id], references: [id])
  expert_preferences ExpertMinorCategories[]
  job_posts          JobPostMinorCategories[]

  @@map("minor_categories")
}

// Junction table for many-to-many relationship between experts and their preferred minor categories.
model ExpertMinorCategories {
  // Identifiers
  expert_id         Int
  minor_category_id Int

  expert         Experts         @relation(fields: [expert_id], references: [id])
  minor_category MinorCategories @relation(fields: [minor_category_id], references: [id])

  @@id([expert_id, minor_category_id])
  @@map("expert_minor_categories")
}

// Junction table for many-to-many relationship between job posts and major categories.
model JobPostMajorCategories {
  // Identifiers
  job_post_id       Int
  major_category_id Int

  // Relations
  job_post       JobPosts        @relation(fields: [job_post_id], references: [id])
  major_category MajorCategories @relation(fields: [major_category_id], references: [id])

  @@id([job_post_id, major_category_id])
  @@map("job_post_major_categories")
}

// Junction table for many-to-many relationship between job posts and minor categories.
model JobPostMinorCategories {
  job_post_id       Int
  minor_category_id Int
  job_post          JobPosts        @relation(fields: [job_post_id], references: [id])
  minor_category    MinorCategories @relation(fields: [minor_category_id], references: [id])

  @@id([job_post_id, minor_category_id])
  @@map("job_post_minor_categories")
}

// Model representing reviews given to experts by clients or peers.
model Reviews {
  // Identifiers
  id Int @id @default(autoincrement()) // Unique identifier for each review.

  // Foreign Keys
  expert_id Int // Foreign key linking to the Experts table.

  // Attributes
  grade   Int // Numerical grade or rating given to the expert.
  comment String // Textual comment or feedback.

  // Metadata
  created_at DateTime @default(now()) // Timestamp when the review was created.
  updated_at DateTime @default(now()) // Timestamp when the review was last updated.

  // Relations
  expert Experts @relation(fields: [expert_id], references: [id])

  @@map("reviews")
}

// Model representing geographic regions.
model Region {
  // Identifiers
  id Int @id @default(autoincrement()) // Unique identifier for each region.

  // Attributes
  name String // Name of the region.

  // Relations
  cities City[] // List of cities within the region.

  @@map("regions")
}

// Model representing cities.
model City {
  // Identifiers
  id Int @id @default(autoincrement()) // Unique identifier for each city.

  // Foreign Keys
  region_id Int // Foreign key linking to the Region model.

  //Attributes
  name String // Name of the city.

  // Relations
  region   Region     @relation(fields: [region_id], references: [id]) // Relationship to the Region model.
  experts  Experts[]
  jobPosts JobPosts[]

  @@map("cities")
}
