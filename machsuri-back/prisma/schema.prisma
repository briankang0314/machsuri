generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id           Int       @id @default(autoincrement())
  name         String
  email        String    @unique
  password     String
  userImage    String?
  phoneNumber  String?
  isDeleted    Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())
  deletedAt    DateTime? @default(null)

  experts      Experts?
  requestForm  RequestForm[]
  reviews      Reviews[]
  @@map("users")
}

model Experts {
  id                Int       @id @default(autoincrement())
  userId            Int       @unique
  detailAddressId   Int
  name              String
  expertImage       String?
  intro             String?
  startTime         String? // Expected format "HH:MM"
  endTime           String? // Expected format "HH:MM"
  workExperience    Int?
  employeeNumber    Int?
  isDeleted         Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now())
  deletedAt         DateTime? @default(null)

  users         Users         @relation(fields: [userId], references: [id])
  detailAddress DetailAddress @relation(fields: [detailAddressId], references: [id])

  reviews           Reviews[]
  expertsCategories ExpertsCategories[]
  expert_posts      ExpertPosts[]

  @@index([userId], name: "userId")
  @@map("experts")
}

model MajorCategories {
  id         Int       @id @default(autoincrement())
  name       String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())

  minorCategories MinorCategories[]
  @@map("majorCategories")
}

model MinorCategories {
  id                Int       @id @default(autoincrement())
  majorCategoryId Int
  name              String
  image             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now())

  majorCategories MajorCategories @relation(fields: [majorCategoryId], references: [id])

  applyForm         ApplyForm[]
  expertsCategories ExpertsCategories[]
  @@index([majorCategoryId], name: "majorCategoryId")
  @@map("minorCategories")
}

model Questions {
  id                  Int       @id @default(autoincrement())
  minorCategoryId     Int
  questionNumber      Int
  questionText String
  createdAt           DateTime? @default(now())
  updatedAt           DateTime? @default(now())

  minorCategories MinorCategories @relation(fields: [minorCategoryId], references: [id])

  answers Answers[]
  applyForm     ApplyForm[]

  @@index([minorCategoryId], name: "minorCategoryId")
  @@map("questions")
}

model Answers {
  id          Int       @id @default(autoincrement())
  questionId  Int
  answerText  String
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @default(now())

  questions Questions @relation(fields: [questionId], references: [id])

  applyForm ApplyForm[]

  @@index([questionId], name: "questionId")
  @@map("answers")
}

model ApplyForm {
  id                 Int       @id @default(autoincrement())
  userId             Int
  minorCategoryId    Int
  endedAt            DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now())

  users              Users        @relation(fields: [userId], references: [id])
  minorCategories MinorCategories @relation(fields: [minorCategoryId], references: [id])

  @@index([userId], name: "userId")
  @@index([minorCategoryId], name: "minorCategoryId")
  @@map("applyForm")
}

model Reviews {
  id         Int       @id @default(autoincrement())
  expertId   Int
  userId     Int
  grade      Int
  comment    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())

  experts Experts @relation(fields: [expertId], references: [id])
  users   Users   @relation(fields: [userId], references: [id])

  reviewImages ReviewImages[]

  @@index([expertId], name: "expertId")
  @@index([userId], name: "userId")
  @@map("reviews")
}

model ReviewImages {
  id           Int       @id @default(autoincrement())
  reviewId     Int
  reviewImage  String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())

  reviews      Reviews   @relation(fields: [reviewId], references: [id])

  @@index([reviewId], name: "reviewId")
  @@map("reviewImages")
}

model ExpertsCategories {
  id                 Int       @id @default(autoincrement())
  minorCategoryId    Int
  expertId           Int
  isMain             Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now())

  experts            Experts      @relation(fields: [expertId], references: [id])
  minorCategories MinorCategories @relation(fields: [minorCategoryId], references: [id])

  @@index([expertId], name: "expertId")
  @@index([minorCategoryId], name: "minorCategoryId")
  @@map("expertsCategories")
}

model ExpertPosts {
  id            Int           @id @default(autoincrement())
  expertId      Int
  postedImage   String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())

  experts Experts @relation(fields: [expertId], references: [id])

  @@index([expertId], name: "expertId")
  @@map("expertPosts")
}

model Address {
  id         Int       @id @default(autoincrement())
  name       String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())

  detailAddress DetailAddress[]
  experts       Experts[]
  @@map("address")
}

model DetailAddress {
  id         Int       @id @default(autoincrement())
  addressId  Int
  name       String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())

  address Address @relation(fields: [addressId], references: [id])

  experts Experts[]
  @@index([addressId], name: "addressId")
  @@map("detailAddress")
}